EGG_NAME=clic
SHELL=/bin/bash -o pipefail

all: compile test lint

include ../conf.mk

bin/pip:
	python3 -m venv .

requirements.txt:
	touch requirements.txt

lib/.requirements: requirements.txt requirements-to-freeze.txt setup.py bin/pip
	# Install frozen requirements
	./bin/pip install -r requirements.txt
	# Make sure any new requirements are available
	./bin/pip install -r requirements-to-freeze.txt
	# Freeze the output at current state
	./bin/pip freeze | grep -v egg=$(EGG_NAME) | grep -v 'pkg-resources==0.0.0' > requirements.txt
	touch lib/.requirements

compile: lib/.requirements appconfig.py

test: compile
	./bin/pytest $(EGG_NAME) tests

lint: lib/.requirements
	./bin/flake8 --ignore=E501,W504 $(EGG_NAME)/ tests/

coverage: compile
	./bin/coverage run ./bin/py.test $(EGG_NAME)/ tests/
	./bin/coverage html
	mkdir -p ../client/www/coverage
	ln -frs htmlcov ../client/www/coverage/server
	echo Visit http://$(WWW_SERVER_NAME)/coverage/server/index.html

start: lib/.requirements # test
	./bin/uwsgi \
	    --master \
	    --processes=1 --threads=1 \
	    --enable-threads --thunder-lock \
	    --honour-stdin \
	    --mount /=$(EGG_NAME).uwsgi:app \
	    --need-app \
	    --chmod-socket=666 \
	    -s $(API_SOCKET)

install:
	./install.sh

appconfig.py: $(PROJECT_PATH)/conf.mk
	echo "# This file is generated by server/Makefile, do not edit" > $@.tmp
	echo "PROJECT_REV='$(PROJECT_REV)'" >> $@.tmp
	echo "DB_DSN='dbname=$(DB_NAME)'" >> $@.tmp
	mv $@.tmp $@

.PHONY: compile test lint coverage start install
